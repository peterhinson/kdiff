#!/bin/bash

show_help()
{
	IFS= read -r -d '' HELP_MESSAGE <<-EOM

	USAGE :

	    kdiff [OPTIONS] [KICAD_PROJECT]

	OPTIONS:

	    -a|--all         Include all commits even if schematics/layout don't have changes
	    -o|--older HASH  Show commits starting from this one
	    -n|--newer HASH  Show commits until this one delimited by this one
	    -r|--remove      Remove cache (kidiff) folder before run
	    -l|--webservice  Do not launch webservice/browser at the end
	    -p|--port PORT   Set webserver port
	    -V|--verbose     Verbose
	    -v|--version     Show version
	    -D|--debug       Extra info
	    -h|--help        This help

	KICAD_PROJECT:

	    KICAD_PROJECT file is optional.
	    If it is missing then file selector in GUI is used instead

	EXAMPLES:

	    # Launch GUI with file selector
	    kdiff

	    # Kicad project on the root of the repo
	    kdiff board.pro

	    # Nested project (with verbose and starting fresh)
	    kdiff nested-project/board.pro -r -V
	EOM

	echo -e "${HELP_MESSAGE}"
}

show_version()
{
	IFS= read -r -d '' VERSION <<-EOM

	    $(basename "${0}") x.y.z
	    plotgitsch $(plotgitsch --version)
	    kidiff x.y.z
	EOM

	echo -e "$VERSION"
}

ctrl_c()
{
	echo "** Trapped CTRL-C"
	exit 1
}

check_tool()
{
	tool=${1}
	exit=${2}

	if ! command -v "${tool}" &> /dev/null; then
		if [[ "${exit}" != "" ]]; then
			echo "${tool} could not be found"
			exit 1
		fi
		return 1
	else
		return 0
	fi
}

# ==============================================
# Redefine functions for making Linux/OSX smooth
# ==============================================

readlink_osx()
{
	target_file="${1}"
	dir_name=$(dirname "${target_file}")

	cd "${dir_name}" || exit
	target_file=$(basename "${target_file}")

	# Iterate down a (possible) chain of symlinks
	while [ -L "${target_file}" ]
	do
		target_file=$(readlink "${target_file}")
		cd "$(dirname "${target_file}")" || exit
		target_file=$(basename "${target_file}")
	done

	# Compute the canonicalized name by finding the physical path
	# for the directory we're in and appending the target file.
	phys_dir=$(pwd -P)

	result="${phys_dir}/${target_file}"

	echo "${result}"
}

readlink_()
{
	case ${OSTYPE} in
		darwin*)
			readlink_osx "${1}"
			;;
		*)
			readlink -f "${1}"
			;;
	esac
}

tac_()
{
	case ${OSTYPE} in
		darwin*)
			tail -r
		;;
		*)
			tac
		;;
	esac
}

sed_()
{
	case ${OSTYPE} in
		darwin*)
			gsed "$@"
			;;
		*)
			sed "$@"
			;;
	esac
}

find_()
{
	case ${OSTYPE} in
		darwin*)
			gfind "$@"
			;;
		*)
			find "$@"
			;;
	esac
}

# ======================
# ======================

get_pages()
{
	board_name=${1}
	main_schematic=${2}

	# First page is this one
	pages="${board_name}|${board_name}"

	pagenames=$(sed_ "s/\r$//g" "${main_schematic}" | grep "^F0 " | cut -d" " -f2 | tr "\n" "|" | sed_ "s/\"//g" | sed_ "s/|$//g" | tr "|" "\n")
	pagepaths=$(sed_ "s/\r$//g" "${main_schematic}" | grep "^F1 " | cut -d" " -f2 | tr "\n" "|" | sed_ "s/\"//g" | sed_ "s/|$//g" | tr "|" "\n")

	IFS=$'\n'
	n=0
	for pagename in ${pagenames}; do

		n=$((n+1))

		pagename=$(echo "${pagename}" | sed_ "s/^ //g" | sed_ "s/ $//g")
		pagepath=$(echo "${pagepaths}" | sed_ -n ${n}p)
		filename=$(basename "${pagepath}" | sed_ "s/${KICAD_SCH_EXTENSION}//g")

		page="${pagename}|${filename}"
		pages="${pages}\n${page}"

	done

	echo -e "${pages}"
}

insert_commits()
{
	html="${1}"
	commits="${2}"
	commit1_idx="${3}"
	commit2_idx="${4}"
	project="${5}"
	kicad_pcb="${6}"
	sch_files=$(echo "${7}" | sed_ "s/^[ \t]\+//g" | sed_ "s/[ \t]$\+//g")

	# GIT COMMITS FORMAT
	#
	# fcd81ef | 2021-01-22 17:21:39 -0300 | Leandro Heck | Initial version
	# d20b900 | 2021-01-22 16:59:29 -0300 | Leandro Heck | Initial commit

	n=0

	COMMITS_LIST_HTML=""

	empty_icon='<span class="iconify" style="padding-left: 0px; padding-right 0px; width: 14px; height: 14px; color: rgba(255, 0, 0, 0.5);" data-icon="bx:bx-x" data-inline="false"></span>'

	IFS=$'\n'
	for commit in ${commits}; do

		if [[ ${commit} != "local" ]]; then

			hash=$(echo "${commit}" | cut -d'|' -f1 | sed_ "s/^ //g" | sed_ "s/[ t]\+//g" )
			date=$(echo "${commit}" | cut -d'|' -f2 | cut -d' ' -f1-2 | sed_ "s/^ //g" )
			user=$(echo "${commit}" | cut -d'|' -f3 | sed_ "s/^ //g" )
			msg=$(echo "${commit}" | cut -d'|' -f4 | sed_ "s/^ //g" )


			# check for changes in ".sch|.kicad_sch" files
			if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${project}" | cat | grep -s -E "${sch_files// /|}" &> /dev/null; then
				sch_icon='<span class="iconify" style="padding-left: 0px; padding-right 0px; width: 14px; height: 14px; color: #A6E22E;" data-icon="carbon:schematics" data-inline="false"></span>'
			else
				sch_icon="${empty_icon}"
			fi

			# check for changes in .kicad_pcb files
			if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${project}" | cat | grep -s "${kicad_pcb}" &> /dev/null; then
				layout_icon='<span class="iconify" style="padding-left: 0px; padding-right 0px; width: 14px; height: 14px; color: #F92672;" data-icon="codicon:circuit-board" data-inline="false"></span>'
			else
				layout_icon="${empty_icon}"
			fi

			# Check for changes in textual files only
			if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${project}" | cat | grep -s -vE "${sch_files// /|}${kicad_pcb}" &> /dev/null; then
				text_icon='<span class="iconify" style="padding-left: 0px; padding-right 0px; width: 14px; height: 14px; color: #888888;" data-icon="bi:file-earmark-text" data-inline="false"></span>'
			else
				text_icon="${empty_icon}"
			fi

			if [[ ${n} == "${commit1_idx}" ]] || [[ ${n} == "${commit2_idx}" ]]; then
				checked="checked='checked'"
			else
				checked=""
			fi

			IFS= read -r -d '' COMMIT_HTML <<-EOM
			    <input class="chkGroup" type="checkbox" id="${hash}" name="commit" value="${hash}" ${checked} onchange="update_commits()"/>
			    <label class="text-sm-left list-group-item" for="${hash}">
			      <table style="width:100%">
			        <tr>
			          <td rowspan=2 style="vertical-align: top; width: 1.8em;">
			              <svg viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" width="15" height="15">
			                  <path d="M7.5 10.5a3 3 0 010-6m0 6a3 3 0 000-6m0 6V15m0-10.5V0" stroke="currentColor"></path>
			              </svg>
			            </td>
			          <td><em class="text-info" style="  line-height: 0.7;">${msg}</em></td>
			        </tr>
			        <tr>
			          <td white-space:nowrap;overflow: hidden;><span class="text-success font-weight-normal">${hash}</span> <span class="text-muted"> | </span> ${sch_icon} ${layout_icon} ${text_icon} <span class="text-muted font-weight-normal"> | ${date} | ${user}</td>
			        </tr>
			      </table>
			    </label>
			EOM

		else

			hash="local"
			date="$(date +'%Y-%m-%d')"
			user="${USER}"
			 msg="Local changes"

			sch_icon="${empty_icon}"
			layout_icon="${empty_icon}"
			text_icon="${empty_icon}"

			if [[ ${n} == ${commit1_idx} ]] || [[ ${n} == ${commit2_idx} ]]; then
				checked="checked='checked'"
			else
				checked=""
			fi

			IFS= read -r -d '' COMMIT_HTML <<-EOM
			    <input class="chkGroup" type="checkbox" id="${hash}" name="commit" value="${hash}" ${checked} onchange="update_commits()"/>
			    <label class="text-sm-left list-group-item" for="${hash}">
			      <table style="width:100%">
			        <tr>
			          <td rowspan=2 style="vertical-align: top; width: 1.8em;">
			              <svg viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" width="15" height="15">
			                  <path d="M7.5 10.5a3 3 0 010-6m0 6a3 3 0 000-6m0 6V15m0-10.5V0" stroke="currentColor"></path>
			              </svg>
			            </td>
			          <td><em class="text-warning" style="  line-height: 0.7;">${msg}</em></td>
			        </tr>
			      </table>
			    </label>
			EOM

	        # <tr>
	        #   <td white-space:nowrap;overflow: hidden;><span class="text-success font-weight-normal">${hash}</span> <span class="text-muted"> | </span> ${sch_icon} ${layout_icon} ${text_icon} <span class="text-muted font-weight-normal"> | ${date} | ${user}</td>
	        # </tr>

		fi

		n=$((n+1))

		COMMITS_LIST_HTML="${COMMITS_LIST_HTML}${COMMIT_HTML}"

	done

	# Disables check since it does not work with quotes
	# shellcheck disable=SC2086
	COMMITS_LIST_HTML=$(echo ${COMMITS_LIST_HTML} | sed_ "s/@/-/g")
	echo 's@<!-- FILL_COMMITS_HERE -->@'"${COMMITS_LIST_HTML}"'@g' > .script.sed
	sed_ -i -f .script.sed "${html}"
	rm -rf .script.sed
}

insert_pages()
{
	html="${1}"
	pages="${2}"

	# FORMAT
	# pagename|pagepath(.sch|.kicad_sch)

	n=0

	PAGES_LIST_HTML=""

	IFS=$'\n'
	for page in ${pages}; do

		page_name=$(echo "${page}" | cut -d'|' -f1 | sed_ "s/[ \t]\+//g")
		page_filename=$(echo "${page}" | cut -d'|' -f2 | sed_ "s/[ \t]\+//g" | sed_ "s/${KICAD_SCH_EXTENSION}//g")

		if [[ $n == 0 ]]; then
			checked='checked="checked"'
		else
			checked=""
		fi

		IFS= read -r -d '' HTML_SNIPPET <<-EOM
		    <input type="radio" id="${page_filename}" value="${page_filename}" name="pages" ${checked} onchange="change_page()"/>
		    <label class="rounded text-sm-left list-group-item radio-box" onclick="change_page_onclick(${page_filename})" for="${page_filename}">
		    <span style="margin-left:0.5em; margin-right:0.1em;" class="iconify" data-icon="gridicons:pages" data-inline="false"></span>
		    ${page_name}
		    </label>
		EOM

		n=$((n+1))

		PAGES_LIST_HTML="${PAGES_LIST_HTML}${HTML_SNIPPET}"

	done

	# Disables check since it does not work with quotes
	# shellcheck disable=SC2086
	PAGES_LIST_HTML=$(echo ${PAGES_LIST_HTML} | sed_ "s/@/-/g")
	echo 's@<!-- FILL_PAGES_HERE -->@'"${PAGES_LIST_HTML}"'@g' > .script.sed
	sed_ -i -f .script.sed "${html}"
	rm -rf .script.sed
}

insert_layers()
{
	html="${1}"
	layers="${2}"

	# FORMAT
	# LAYER_ID LAYER_NAME

	n=0

	LAYERS_LIST_HTML=""

	IFS=$'\n'
	for layer in ${layers}; do

		layer_id=$(echo "${layer}" | cut -d " " -f1)
		layer_id=$(printf "%02d" "$layer_id")

		layer_name=$(echo "${layer}" | cut -d " " -f2)

		# Update layer name by replacing "." with "_"
		layer_name=$(sed_ "s/\./_/g" <<< "${layer_name}")

		case "${layer_name}" in
			B*Adhes)   layer_color="#3545A8" ;;
			B*CrtYd)   layer_color="#D3D04B" ;;
			B*Cu)      layer_color="#359632" ;;
			B*Fab)     layer_color="#858585" ;;
			B*Mask)    layer_color="#943197" ;;
			B*Paste)   layer_color="#969696" ;;
			B*SilkS)   layer_color="#481649" ;;
			Cmts*User) layer_color="#7AC0F4" ;;
			Dwgs*User) layer_color="#0364D3" ;;
			Eco1*User) layer_color="#008500" ;;
			Eco2*User) layer_color="#008500" ;;
			Edge_Cuts) layer_color="#C9C83B" ;;
			F*Adhes)   layer_color="#A74AA8" ;;
			F*CrtYd)   layer_color="#A7A7A7" ;;
			F*Cu)      layer_color="#952927" ;;
			F*Fab)     layer_color="#C2C200" ;;
			F*Mask)    layer_color="#943197" ;;
			F*Paste)   layer_color="#3DC9C9" ;;
			F*SilkS)   layer_color="#339697" ;;
			In1*Cu)    layer_color="#C2C200" ;;
			In2*Cu)    layer_color="#C200C2" ;;
			In3*Cu)    layer_color="#C20000" ;;
			In4*Cu)    layer_color="#0000C2" ;;
			Margin)    layer_color="#D357D2" ;;
			*)         layer_color="" ;;
		esac

		# https://docs.kicad.org/doxygen/layers__id__colors__and__visibility_8h_source.html

		# Layers
		F_CU=00
		IN1_CU=01
		IN2_CU=02
		IN3_CU=03
		IN4_CU=04
		B_CU=31

		# Adjust (copper) layers that have custom names
		case "${layer_id}" in
			"${F_CU}")   layer_color="#952927" ;;
			"${IN1_CU}") layer_color="#C2C200" ;;
			"${IN2_CU}") layer_color="#C200C2" ;;
			"${IN3_CU}") layer_color="#C20000" ;;
			"${IN4_CU}") layer_color="#0000C2" ;;
			"${B_CU}")   layer_color="#359632" ;;
		esac

		if [[ "$n" == "0" ]]; then
			checked="checked='checked'"
		else
			checked=""
		fi

		IFS= read -r -d '' HTML_SNIPPET <<-EOM
		    <input type="radio" id="${layer_name}" name="layers" value="${layer_id}-${layer_name}" ${checked}  onchange="change_layer()"/>
		    <label class="rounded text-sm-left list-group-item radio-box" onclick="change_layer_onclick(${layer_id}-${layer_name})" for="${layer_id}-${layer_name}">
		        <span style="margin-left:0.5em; margin-right:0.1em; color: ${layer_color}" class="iconify" data-icon="teenyicons-square-solid" data-inline="false"></span>
		        ${layer_id}-${layer_name}
		    </label>
		EOM

		n=$((n+1))

		LAYERS_LIST_HTML="${LAYERS_LIST_HTML}${HTML_SNIPPET}"

	done

	# Disables check since it does not work with quotes
	# shellcheck disable=SC2086
	LAYERS_LIST_HTML=$(echo ${LAYERS_LIST_HTML} | sed_ "s/@/-/g")
	echo 's@<!-- FILL_LAYERS_HERE -->@'"${LAYERS_LIST_HTML}"'@g' > .script.sed
	sed_ -i -f .script.sed "${html}"
	rm -rf .script.sed
}

generate_schematic_artifacts()
{
	commit1=${1}
	commit2=${2}
	project_path=${3}
	board_name=${4}
	sch_page_names=${5}

	removed_color="FF0000"
	added_color="008FFF"
	unchanged_color="FFFFFF"
	background_color="222222"

	if [[ ${commit1} == "local" ]]; then commit1=""; fi
	if [[ ${commit2} == "local" ]]; then commit2=""; fi

	if [[ ! "${PLOTGITSCH_MISSING}" == 1 ]]; then

		if [[ "${project_path}" == "." ]] || [[ "${project_path}" == "./" ]]; then
			plotgitsch_path=""
			lib_path="."
		else
			if [[ "${current_path}" != "${project_path}" ]]; then
				pushd "${project_path}" &> /dev/null || exit
				plotgitsch_path="-r ${project_path}"
				lib_path="."
			else
				plotgitsch_path="-r ${project_path}"
				lib_path="."
			fi
		fi

		cmd="plotgitsch ${plotgitsch_path} -m -l ${lib_path}/${board_name}-cache.lib -c ${removed_color}:${added_color}:${unchanged_color}:${background_color} ${commit1} ${commit2} ${HIDE} &> /dev/null"
		if [[ "${VERBOSE}" == "1" ]]; then
			echo "   ${cmd}"
		fi
		if [[ "${DRY_RUN}" == "0" ]]; then
			eval "${cmd}"
			ret=$?
			if [[ "${VERBOSE}" == "1" ]]; then
				if [[ "${ret}" -gt "0" ]]; then
					echo "   Status: ${ret}"
				fi
			fi
		fi
		if [[ "${current_path}" != "${project_path}" ]]; then
			popd &> /dev/null || exit
			mv "${project_path}"/*.svg .
		fi
	fi

	IFS=$'\n'

	blank_path="blank.svg"
	cp "${web_dir}blank.svg" "blank.svg"

	for sch_page_name in ${sch_page_names}; do

		# Create blank svg when it is missing
		if [[ ! -f "sch1-${sch_page_name}.svg" ]]; then
			ln -sf "${blank_path}" "sch1-${sch_page_name}.svg"
		fi
		if [[ ! -f "sch2-${sch_page_name}.svg" ]]; then
			ln -sf "${blank_path}" "sch2-${sch_page_name}.svg"
		fi
	done

	# Restore names
	if [[ ${commit1} == "" ]]; then commit1="local"; fi
	if [[ ${commit2} == "" ]]; then commit2="local"; fi

	IFS=$'\n'
	for sch_page_svg in *.svg; do

		# Background transparent
		sed_ -i 's/fill="#FFFFFF"/fill="#FFFFFF00"/g' "${sch_page_svg}" &> /dev/null
		sed_ -i 's/fill="#222222"/fill="#22222200"/g' "${sch_page_svg}" &> /dev/null

		# Elements in black
		sed_ -i 's/fill="#FF0000"/fill="#000000FF"/g' "${sch_page_svg}" &> /dev/null
		sed_ -i 's/fill="#00FF00"/fill="#000000FF"/g' "${sch_page_svg}" &> /dev/null
		sed_ -i 's/stroke="#800000"/stroke="#000000FF"/g' "${sch_page_svg}" &> /dev/null

		case "${sch_page_svg}" in
			sch1-*)
				new_sch_name=${sch_page_svg//sch1/sch}
				mv -f "${sch_page_svg}" "${output_dir}/${commit1}/${new_sch_name}" 2> /dev/null
				;;

			sch2-*)
				new_sch_name=${sch_page_svg//sch2/sch}
				mv -f "${sch_page_svg}" "${output_dir}/${commit2}/${new_sch_name}" 2> /dev/null
				;;
			blank.svg)
				cp "${sch_page_svg}" "${output_dir}/${commit1}/${sch_page_svg}" 2> /dev/null
				cp "${sch_page_svg}" "${output_dir}/${commit2}/${sch_page_svg}" 2> /dev/null
				;;
		esac
	done
}

generate_layout_artifacts()
{
	commit1=${1}
	commit2=${2}
	output_dir=${3}
	kicad_pcb=${4}
	board_name=${5}

	if [[ ${commit1} == "local" ]]; then commit1="${kicad_pcb}"; fi
	if [[ ${commit2} == "local" ]]; then commit2="${kicad_pcb}"; fi

	if [[ ! "${KIDIFF_MISSING}" == 1 ]]; then

		cmd="kidiff ${kicad_pcb} --webserver-disable -a ${commit1} -b ${commit2} ${HIDE} &> /dev/null"
		if [[ "${VERBOSE}" == "1" ]]; then
			echo "   ${cmd}"
		fi
		if [[ "${DRY_RUN}" == "0" ]]; then
			eval "${cmd}"
			ret=$?
			if [[ "${VERBOSE}" == "1" ]]; then
				if [[ "${ret}" -gt "0" ]]; then
					echo "   Status: ${ret}"
				fi
			fi
		fi

		if [ -f "${output_dir}/diff.txt" ]; then
			cp -f "${output_dir}/diff.txt" "${output_dir}/diff-pcb-${commit1}-${commit2}.txt"
			cp -f "${output_dir}/diff.txt" "${output_dir}/diff-pcb-${commit2}-${commit1}.txt"
		fi

		# Restore names
		if [[ ${commit1} == "${kicad_pcb}" ]]; then commit1="local"; fi
		if [[ ${commit2} == "${kicad_pcb}" ]]; then commit2="local"; fi

		# If board does not have diff images were not generated
		if [[ "$ret" == "1" ]]; then
			if [[ ! $(du -s "${output_dir}/${commit1}/${kicad_pcb}" | cut -d$'\t' -f1) = 0 ]]; then
				cmd="plotpcb -o \"${output_dir}/${commit1}/\" -q \"${output_dir}/${commit1}/${kicad_pcb}\" ${HIDE} &> /dev/null"
				if [[ "${VERBOSE}" == "1" ]]; then
					echo "   ${cmd}"
				fi
				if [[ "${DRY_RUN}" == "0" ]]; then
					eval "${cmd}"
					ret=$?
					if [[ "${VERBOSE}" == "1" ]]; then
						if [[ "${ret}" -gt "0" ]]; then
							echo "   Status: ${ret}"
						fi
					fi
				fi
			fi
			if [[ ! $(du -s "${output_dir}/${commit2}/${kicad_pcb}" | cut -d$'\t' -f1) = 0 ]]; then
				cmd="plotpcb -o \"${output_dir}/${commit2}/\" -q \"${output_dir}/${commit2}/${kicad_pcb}\" ${HIDE} &> /dev/null"
				if [[ "${VERBOSE}" == "1" ]]; then
					echo "   ${cmd}"
				fi
				if [[ "${DRY_RUN}" == "0" ]]; then
					eval "${cmd}"
					ret=$?
					if [[ "${VERBOSE}" == "1" ]]; then
						if [[ "${ret}" -gt "0" ]]; then
							echo "   Status: ${ret}"
						fi
					fi
				fi
			fi
		fi
	fi

	IFS=$'\n'
	blank_path="blank.svg"

	for layer in ${used_board_layers}; do
		layer_id=$(echo "${layer}" | cut -d " " -f1)
		layer_id=$(printf "%02d" "$layer_id")

		layer_name=$(echo "${layer}" | cut -d " " -f2 | sed "s/\./_/g")

		# Create blank svgs if some is missing

		if [[ ! -f "${output_dir}/${commit1}/${board_name}-${layer_id}-${layer_name}.svg" ]]; then
			pushd "${output_dir}/${commit1}" &> /dev/null
			ln -sf "${blank_path}" "${board_name}-${layer_id}-${layer_name}.svg"
			popd &> /dev/null
		fi

		if [[ ! -f "${output_dir}/${commit2}/${board_name}-${layer_id}-${layer_name}.svg" ]]; then
			pushd "${output_dir}/${commit2}" &> /dev/null
			ln -sf "${blank_path}" "${board_name}-${layer_id}-${layer_name}.svg"
			popd &> /dev/null
		fi
	done
}

generate_artifacts()
{
	script_path=${1}
	repo_path=${2}
	project_path=${3}
	kicad_sch=${4}
	kicad_pcb=${5}

	# Workaround for windows line endings
	if [[ ! -f "${kicad_pcb}.bkp" ]]; then
		cp "${kicad_pcb}" "${kicad_pcb}.bkp" 2> /dev/null
	fi
	dos2unix "${kicad_pcb}" &> /dev/null

	main_html=index.html

	filename=$(basename -- "${kicad_pcb}")
	board_name="${filename%.*}"

	if [[ "${project_path}" != "." ]]; then
		output_dir="${repo_path}/kidiff/${project_path}"
	else
		output_dir="${repo_path}/kidiff/"
	fi

	web_dir="${output_dir}/web/"

	if [[ "$REMOVE_KDIFF_FOLDER" == "1" ]]; then
		echo
		echo "Removing ${output_dir} folder ..."
		if ! rm -rf "${output_dir}" &> /dev/null; then
			echo "Warning: folder was not removed"
		fi
	fi

	current_path=$(realpath --relative-to="${repo_path}" .)

	if [[ "${current_path}" == "${project_path}" ]]; then
		if [[ "${project_path}" != "." ]]; then
			current_path_fix="./"
		else
			current_path_fix="${project_path}"
		fi
	else
		current_path_fix="${project_path}"
	fi

	sch_files=$(find_ "${current_path_fix}" -name "*${KICAD_SCH_EXTENSION}" -printf "%p ")

	if [[ "${DEBUG}" == "1" ]]; then
		echo
		echo "    script_path: ${script_path}"
		echo
		echo "     repo_path: ${repo_path}"
		echo "   project_dir: ${project_path}"
		echo
		echo "     kicad_pcb: ${kicad_pcb}"
		echo "     kicad_sch: ${kicad_sch}"
		echo "     sch_files: ${sch_files}"
		echo "    board_name: ${board_name}"
		echo
		echo "    output_dir: ${output_dir}"
		echo "       web_dir: ${web_dir}"
		echo
	fi

	mkdir -p "${web_dir}/"
	mkdir -p "${output_dir}/diff/"

	git_branch=$(git rev-parse --abbrev-ref HEAD)

	if [[ "$ALL_COMMITS" == "1" ]]; then
		cmd="git-kdiff-log ${git_branch} -- ${project_path}"
		if [[ "${VERBOSE}" == "1" ]]; then
			echo "${cmd}"
			echo
		fi
		commits=$(eval "${cmd}")
	else
		cmd="git-kdiff-log ${git_branch} -- ${sch_files} ${kicad_pcb}"
		if [[ "${VERBOSE}" == "1" ]]; then
			echo "${cmd}"
			echo
		fi
		commits=$(eval "${cmd}")
	fi

	if [[ "$OLDER_COMMIT" != "" ]]; then
		if [[ "${VERBOSE}" == "1" ]]; then
			echo "  Older commit: ${OLDER_COMMIT}"
		fi
		commits=$(echo "${commits}" | sed_ "/^${OLDER_COMMIT}/q")
	fi

	if [[ "$NEWER_COMMIT" != "" ]]; then
		if [[ "${VERBOSE}" == "1" ]]; then
			echo "  Newer commit: ${NEWER_COMMIT}"
			echo
		fi
		commits=$(echo "${commits}" | sed_ -n "/^${NEWER_COMMIT}/,\$p")
	fi

	if [[ "${VERBOSE}" == "1" ]]; then
		echo "Commits list:"
		echo "${commits}"
	fi

	# Commits list has to have 2 commits at least
	if [[ $(echo "${commits}" | wc -l | sed_ "s/^[ \t]\+//g") -lt "2" ]]; then
		echo "Leaving, less than 2 commits found"
		exit 0
	fi

	# Add local changes to be compared
	IFS= read -r -d '' commits <<-EOM
	local
	${commits}
	EOM

	hashs=$(echo "${commits}" | tac_ | cut -d' '  -f1);
	n_hashs=$(echo "${hashs}" | wc -w | sed_ "s/^[ \t]\+//g")
	n_comparisons=$(echo "${n_hashs} * (${n_hashs} - 1) " | bc)

	echo
	echo "Generating artifacts for ${n_hashs} commits."
	echo "Totaling ${n_comparisons} possible comparisons."
	echo

	n=0

	sch_page_names=$(get_pages "${board_name}" "${current_path_fix}/${kicad_sch}" | cut -d"|" -f2 | sed_ "s/\r$//g")
	used_board_layers=$(sed_ -n '/^  (layers/,/  )$/{/^  (layers/!{/  )$/!p}}' "${kicad_pcb}" | sed_ "s/^[ \t]\+//g" | sed_ "s/[()]//g" | cut -d" " -f-2 | sed_ "s/\r$//g" | sed "s/\"//g")

# | sed "s/\./_/g"

	if [[ "${VERBOSE}" == "1" ]]; then
		echo "Schematic Pages:"
		echo "${sch_page_names}" | nl -s": "
		echo
		echo "Used PCB layers:"
		echo "${used_board_layers}" | nl -s": "
		echo
	fi

	IFS=$'\n'
	echo "Assembling the HTML"

	# Copy assets
	cp -f "${script_path}/${main_html}"  "${web_dir}/"
	cp -f "${script_path}/kdiff.js"      "${web_dir}/"
	cp -f "${script_path}/kdiff.css"     "${web_dir}/"
	cp -f "${script_path}/blank.svg"     "${web_dir}/"
	cp -f "${script_path}/favicon.ico"   "${web_dir}/"
	cp -f "${script_path}/redirect.html" "${web_dir}/../index.html"

	for i in ${hashs}; do

		k=0

		for j in ${hashs}; do

			if [[ "${i}" != "${j}" ]]; then

				k=$((k+1))
				n=$((n+1))

				# Check if diff file exists
				if [[ -d "${output_dir}/${j}" ]]; then
					continue
				fi

				if [[ -d "${output_dir}/${j}" ]]; then
					skipping=", skipping..."
				else
					skipping=""
				fi

				if [[ ${k} == 1 ]]; then
					printf "%4d. %s - %s%s\n" "${n}" "${i}" "${j}" "${skipping}"
				else
					printf "%4d. %s - %s%s \n" "${n}" "       " "${j}" "${skipping}"
				fi

				mkdir -p "${output_dir}/${i}/"
				mkdir -p "${output_dir}/${j}/"

				if [[ "$DEBUG" == 0 ]]; then
					HIDE=""
				else
					HIDE="#"
				fi

				generate_schematic_artifacts "${i}" "${j}" "${project_path}" "${board_name}" "${sch_page_names}"
				generate_layout_artifacts "${i}" "${j}" "${output_dir}" "${kicad_pcb}" "${board_name}"

				if [[ "${VERBOSE}" == "1" ]]; then
					echo
				fi
			fi
		done

	done

	
	# Selected commit index
	commit1_idx=0
	commit2_idx=1

	# Insert commits list
	echo "Adding the commits list"
	insert_commits "${web_dir}/${main_html}" "${commits}" "${commit1_idx}" "${commit2_idx}" "${current_path_fix}" "${kicad_pcb}" "${sch_files}"

	# Insert pages list
	echo "Adding schematic pages list"
	pages=$(get_pages "${board_name}" "${current_path_fix}/${board_name}${KICAD_SCH_EXTENSION}")
	insert_pages "${web_dir}/${main_html}" "${pages}"

	# Update board title
	echo "Setting board title"
	title=$(grep -i "(title .*)" "${kicad_pcb}" 2> /dev/null | sed_ "s/^[ \t]\+//g" | cut -d" " -f 2- | sed_ "s/[)\"]//g")
	if [[ $title == "" ]]; then
		title="{Title}";
	fi
	sed_ -i "s|\[PROJECT_TITLE\]|${title}|g" "${web_dir}/${main_html}"

	# Update board revision
	echo "Setting board revision"
	revision=$(grep "(rev " "${kicad_pcb}" 2> /dev/null | sed_ "s/^[ \t]\+//g" | sed_ "s/[()]//g" | cut -d" " -f2- | sed_ "s/\"//g")
	if [[ $revision == "" ]]; then
		revision="{Rev}";
	fi
	sed_ -i "s|\[PROJECT_REVISION\]|${revision}|g" "${web_dir}/${main_html}"

	# Update board date
	echo "Setting board date"
	date=$(grep "(date " "${kicad_pcb}" 2> /dev/null | sed_ "s/^[ \t]\+//g" | sed_ "s/[()]//g" | cut -d" " -f2)
	if [[ $date == "" ]]; then
		date="{Date}";
	fi
	sed_ -i "s|\[PROJECT_DATE\]|${date}|g" "${web_dir}/${main_html}"

	# Update board name
	echo "Setting board name"
	sed_ -i "s|var board_name =.*|var board_name = \"${board_name}\"; // generated by kdiff script |g" "${web_dir}/kdiff.js"

	commit1=$(echo "${commits}" | head -n$((${commit1_idx}+1)) | tail -n1 | cut -d" " -f1)
	commit2=$(echo "${commits}" | head -n$((${commit2_idx}+1)) | tail -n1 | cut -d" " -f1)

	# Initial commit legend
	echo "Setting initial commits"
	sed_ -i "s|\[COMMIT_1_HASH\]|${commit1}|g" "${web_dir}/${main_html}"
	sed_ -i "s|\[COMMIT_2_HASH\]|${commit2}|g" "${web_dir}/${main_html}"

	# Update initial schematic images
	echo "Setting initial schematics"
	sed_ -i "s|\[INITIAL_COMMIT_1_SCH\]|../${commit1}/sch-${board_name}.svg|g" "${web_dir}/${main_html}"
	sed_ -i "s|\[INITIAL_COMMIT_2_SCH\]|../${commit2}/sch-${board_name}.svg|g" "${web_dir}/${main_html}"

	# Update initial layout images
	echo "Setting initial layouts"
	initial_layer_id=$(echo "${used_board_layers}" | head -1 | cut -d " " -f1 | tr "." "_" | printf "%02d")
	initial_layer_name=$(echo "${used_board_layers}" | head -1 | cut -d " " -f2 | tr "." "_")
	sed_ -i "s|\[INITIAL_COMMIT_1_PCB\]|../${commit1}/${board_name}-${initial_layer_id}-${initial_layer_name}.svg|g" "${web_dir}/${main_html}"
	sed_ -i "s|\[INITIAL_COMMIT_2_PCB\]|../${commit2}/${board_name}-${initial_layer_id}-${initial_layer_name}.svg|g" "${web_dir}/${main_html}"

	# Insert layers list
	echo "Adding layers list"
	insert_layers "${web_dir}/${main_html}" "${used_board_layers}"

	# Restore board
	if [[ -f "${kicad_pcb}.bkp" ]]; then
		mv -f "${kicad_pcb}.bkp" "${kicad_pcb}" &> /dev/null
	fi
}


# ====================================================================
# ====================================================================

trap ctrl_c INT

script_path=$(readlink_ "$0")
script_path=$(dirname "${script_path}")

export ALL_COMMITS=0
export DEBUG=0
export DRY_RUN=0
export LAUNCH_PAGE=1
export NEWER_COMMIT=""
export OLDER_COMMIT=""
export REMOVE_KDIFF_FOLDER=0
export VERBOSE=0
export WEBSERVER_PORT=8000

while [[ $# -gt 0 ]]
do
	key="${1}"

	case ${key} in
	-a|--all)
		ALL_COMMITS=1
		shift
		;;

	-d|--dry-run)
		VERBOSE=1
		DRY_RUN=1
		shift
		;;

	-h|--help)
		show_help
		exit 0
		;;

	-l)
		LAUNCH_PAGE=0
		shift
		;;

	-n|--newer)
		NEWER_COMMIT="${2}"
		shift
		shift
		;;

	-o|--older)
		OLDER_COMMIT="${2}"
		shift
		shift
		;;

	-r|--remove)
		REMOVE_KDIFF_FOLDER=1
		shift
		;;

	-p|--port)
		WEBSERVER_PORT="${2}"
		shift
		shift
		;;

	-V|--verbose)
		VERBOSE=1
		shift
		;;

	-v|--version)
		show_version
		exit 0
		;;

	-D|--debug)
		DEBUG=1
		shift
		;;

	*)
		kicad_pro="${1}"
		shift # past argument
		;;
	esac
done

if [[ "${kicad_pro}" == "" ]]; then
	if check_tool "zenity" &> /dev/null; then

		if [[ ${DISPLAY} == "" ]]; then
			export DISPLAY=:0.0
		fi

		kicad_pro=$(\
			zenity \
			    --title "Select Kicad project" \
				--file-selection \
				--file-filter="Kicad Project | *.kicad_pro | *.pro" \
				--file-filter='All files | *')
	else
		kicad_pro=$(file_picker.py)
	fi

	if [[ ! -f "${kicad_pro}" ]]; then
		exit 0
	fi
fi

# Change path if not inside the repo to work from everywhere
repo_path=$(dirname "${kicad_pro}")
if ! git -C "$(pwd)" rev-parse 2> /dev/null; then
	pushd "${repo_path}" &> /dev/null || exit
	kicad_pro=$(basename "${kicad_pro}")
else
	if ! grep "$(pwd)" <<< "${repo_path}"; then
		pushd "${repo_path}" &> /dev/null || exit
		kicad_pro=$(basename "${kicad_pro}")
	fi
fi

filename=$(basename -- "${kicad_pro}")
extension="${filename##*.}"
filename="${filename%.*}"

if [[ ${extension} == "kicad_pro" ]]; then
	echo "Kicad >= 5.99 project"
	# shellcheck source=/dev/null
	source "${script_path}/env-nigtly.sh"
	export KICAD_PRO_EXTENSION=".kicad_pro"
	export KICAD_SCH_EXTENSION=".kicad_sch"
else
	export KICAD_PRO_EXTENSION=".pro"
	export KICAD_SCH_EXTENSION=".sch"
fi

kicad_sch=${filename}${KICAD_SCH_EXTENSION}
kicad_pcb=${filename}.kicad_pcb

# Check required tools
if [[ "${DRY_RUN}" == 0 ]]; then
	check_tool opam > /dev/null
	eval "$(opam config env)"
	PLOTGITSCH_MISSING=$(check_tool plotgitsch)
	KIDIFF_MISSING=$(check_tool kidiff)
	export PLOTGITSCH_MISSING
	export KIDIFF_MISSING
fi

if [[ "${PLOTGITSCH_MISSING}" == 1 ]]; then
	echo "INFO: plotgitsch is missing, skipping schematic diffs"
fi

if [[ "${KIDIFF_MISSING}" == 1 ]]; then
	echo "INFO: kidiff is missing, skipping layout diffs"
fi

if ! check_tool "dos2unix" &> /dev/null; then "dos2unix is missing"; exit; fi

case ${OSTYPE} in
	darwin*)
		if ! check_tool "gsed" &> /dev/null; then "gsed is missing"; exit; fi
		if ! check_tool "gfind" &> /dev/null; then "gfind is missing"; exit; fi
		;;
esac

repo_path=$(git rev-parse --show-toplevel)
kicad_pcb_path=$(readlink_ "${kicad_pcb}" | sed_ "s|${repo_path}/||g")
project_dir=$(dirname "${kicad_pcb_path}" | sed_ "s|${repo_path}/||g")

if [[ -f "${kicad_pro}" ]]; then
	generate_artifacts "${script_path}" "${repo_path}" "${project_dir}" "${kicad_sch}" "${kicad_pcb}"
else
	echo "Kicad project \"${kicad_pro}\" does not exit"
	exit 1
fi

output_dir="${repo_path}/kidiff/${project_dir}"
web_dir="${output_dir}/web/"

if [[ ! "${LAUNCH_PAGE}" == 0 ]]; then
	if grep -q "Microsoft" "/proc/version" &> /dev/null; then
		# Wseb-server alternative for Windows with WSL
		host=127.0.0.1
		echo "Starting web-server at http://${host}:${WEBSERVER_PORT}"
		cmd.exe /C start "http://${host}:${WEBSERVER_PORT}" &> /dev/null &
		echo "(Hit Ctrl+C to exit)"
		if python3 -m http.server -d "${web_dir}/../" -b "${host}" "${WEBSERVER_PORT}" &> /dev/null; then
			pid=$!
			kill -9 $pid > /dev/null
		else
			echo
			echo -e "Error: Web-server's port ${WEBSERVER_PORT} already in use."
			echo -e "Close older kdiff sessions or change the port with '-p [PORT]'"
			exit 1
		fi
	else
		if webserver.py -p "${WEBSERVER_PORT}" "${kicad_pcb}" 2> /dev/null; then
			pid=$!
			kill -9 $pid > /dev/null
		else
			echo
			echo -e "Error: Web-server's port ${WEBSERVER_PORT} already in use."
			echo -e "Close older kdiff sessions or change the port with '-p [PORT]'"
			exit 1
		fi
	fi
fi
